// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/user2410/simplebank/storage (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -package storage -destination storage/storage_mock.go github.com/user2410/simplebank/storage Storage
//

// Package storage is a generated GoMock package.
package storage

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// PutFile mocks base method.
func (m *MockStorage) PutFile(arg0 io.Reader, arg1, arg2 string, arg3 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFile indicates an expected call of PutFile.
func (mr *MockStorageMockRecorder) PutFile(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFile", reflect.TypeOf((*MockStorage)(nil).PutFile), arg0, arg1, arg2, arg3)
}
